@use './measures';
@use 'sass:color';

$millenial-pink-body-background-light: #fff7f8;
$millenial-pink-panes-background: color.scale(
  #ffecf9,
  $lightness: -50%,
  $saturation: -70%
);
$millenial-pink-body-background: color.scale(
  $millenial-pink-panes-background,
  $lightness: +65%,
  // $saturation: -20%
);
$millenial-pink-idle-control: color.scale(
  $millenial-pink-body-background,
  $lightness: -60%
);
$millenial-pink-theme-darkblue: color.scale(
  #4392f1,
  $lightness: -50%,
  $saturation: -40%
);
$millenial-pink-theme-lightblue: color.scale(
  #8ec5fc,
  $lightness: +20%,
  $saturation: -10%
);
$millenial-pink-active-control: $millenial-pink-theme-darkblue;

$lavender-body-background: #c8dadf;
$lavender-panes-background: #beb9d4;
$lavender-dark-body-background: rgb(48, 8, 61);
$lavender-dark-panes-background: rgb(57, 53, 58);
$lavender-idle-control: #58a4b0;
$lavender-active-control: #a3bcf9;

$off-white-color: #faebd7;
$hot-orange-color: #ff6e00;
$ipswich-pine-color: #e3a95e;
$arabian-sand-color: color.scale(#be8864, $lightness: +30%);
$lighter-arabian-sand-color: color.scale($arabian-sand-color, $lightness: +40%);

$body-background: #c8dadf;
$panes-background: #beb9d4;

$darkgray: color.scale(black, $lightness: +2%);
$lighter-darkgray: color.scale(black, $lightness: +5%);

@function controls-box-shadow-color(
  $control-color,
  $box-shadow-lightness-direction
) {
  @return color.scale(
    $control-color,
    $lightness: $box-shadow-lightness-direction * 10%,
    $alpha: -20%
  );
}

@function main-filter(
  $control-color,
  $box-shadow-lightness-direction,
  $radius: 1.3px
) {
  @return drop-shadow(
    0px 0px $radius
      controls-box-shadow-color($control-color, $box-shadow-lightness-direction)
  );
}

@mixin theme-colors($theme: dark) {
  $body: $lavender-dark-body-background !default;
  $body-gradient: none !default;
  $panes: $lavender-dark-panes-background !default;
  $idle-control: $lavender-idle-control !default;
  $active-control: $lavender-active-control !default;
  $overlay-lightness-factor: 1 !default;
  $text: lightgray !default;
  $accent-color: white !default;
  $panes-border: color.scale(
    $panes,
    $lightness: $overlay-lightness-factor * 20%
  ) !default;

  $spectrogram-background-color: transparent !default;
  $spectrogram-grid-color: $hot-orange-color !default;
  $text: $arabian-sand-color !default;
  $spectrogram-image-filter: invert(1) sepia(1) hue-rotate(-17.8deg)
    brightness(0.7) contrast(1.5) blur(0.5px) !default;

  @if $theme == lavender-light {
    $body: $lavender-body-background;
    $panes: $lavender-panes-background;
    $idle-control: $lavender-idle-control;
    $active-control: $lavender-active-control;
    $overlay-lightness-factor: -1;
    $text: black;
  } @else if $theme == lavender-dark {
    $body: $lavender-dark-body-background;
    $panes: $lavender-dark-panes-background;
    $idle-control: $lavender-idle-control;
    $active-control: $lavender-active-control;
    $overlay-lightness-factor: 1;
    $text: lightgray;
  } @else if $theme == dark {
    $body: $darkgray;
    $panes: $lighter-darkgray;
    $active-control: $lighter-arabian-sand-color;
    $idle-control: $lighter-arabian-sand-color;
    $overlay-lightness-factor: 1;
    $spectrogram-background-color: transparent;
    $spectrogram-grid-color: $hot-orange-color;
    $text: $arabian-sand-color;
    $spectrogram-image-filter: invert(1)
      sepia(1)
      hue-rotate(-17.8deg)
      brightness(0.7)
      contrast(1.5)
      blur(0.5px);
    $cycle-select-icon-filter: $spectrogram-image-filter;
  } @else if $theme == millenial-pink {
    // TODO(theis): replace with list variables
    $body: $millenial-pink-body-background;
    $panes: $millenial-pink-panes-background;
    $panes-border: lightgray;
    $active-control: $millenial-pink-active-control;
    $idle-control: $millenial-pink-idle-control;
    $overlay-lightness-factor: +1;
    $text: black;
  } @else if $theme == black-white {
    $body: color.scale(darkgray, $lightness: +60%);
    $panes: color.scale(darkgray, $lightness: -90%);
    $panes-border: lightgray;
    $active-control: $lighter-arabian-sand-color;
    $idle-control: $lighter-arabian-sand-color;
    $accent-color: $hot-orange-color;
    $overlay-lightness-factor: 1;
    $text: $arabian-sand-color;
    $spectrogram-grid-color: white;
  } @else {
    @error "Unknown theme #{$theme}.";
  }

  @if $theme == black-white {
    [nexus-ui] * {
      color: $active-control !important;
    }

    .cycleSelect img {
      filter: grayscale(1) brightness(10) hue-rotate(120deg);
    }
  }

  $spectrogram-cursor-color: $arabian-sand-color;

  // default color, used on the splash screen
  body {
    background-color: $body;
  }
  body.splash-screen {
    background-color: $panes;
  }

  body,
  #app,
  a {
    color: $text;
  }

  input.wrong-input-setting {
    &.wrong-input-setting {
      animation: shake 0.2s ease-in-out 0s 2;
      box-shadow: 0 0 0.5em lightcoral;
      background-color: lightcoral !important;
    }
  }

  @keyframes shake {
    0% {
      margin-left: 0rem;
    }
    25% {
      margin-left: 0.5rem;
    }
    75% {
      margin-left: -0.5rem;
    }
    100% {
      margin-left: 0rem;
    }
  }

  .shepherd-content * {
    color: $text;
  }

  $shepherd-button-text-color: color.invert($text);

  .shepherd-header,
  .shepherd-text,
  .shepherd-footer {
    background-color: $panes;
  }
  .shepherd-button {
    &.shepherd-button-secondary {
      background-color: color.invert($panes);
    }
    background-color: $active-control;
    color: color.scale($shepherd-button-text-color, $alpha: -30%);
    filter: grayscale(0.6);
    &:hover {
      color: $shepherd-button-text-color;
      filter: none;
    }
  }

  .loading-spinner {
    color: color.scale($text, $alpha: -60%);
  }
  .sheet-inpainter .loading-spinner {
    color: color.adjust($text, $alpha: 0.8);
  }

  .logo {
    background-color: color.scale($idle-control, $lightness: +50%);
  }

  #configuration-selection-container {
    .configuration-selection-footer {
      border-top-color: color.scale($panes-border, $alpha: -40%);
    }
    .application-header {
      border-bottom-color: color.scale($panes-border, $alpha: -40%);
      border-top-color: color.scale(
        $panes,
        $lightness: $overlay-lightness-factor * 15%
      );
    }
    &,
    .application-header {
      background-color: color.scale(
        $panes,
        $lightness: $overlay-lightness-factor * 15%
      );
    }
    border: solid thin $panes-border;

    input {
      background-color: color.scale(
        $panes,
        $lightness: $overlay-lightness-factor * 93%
      );
      background-color: $idle-control;
    }

    #eula-text-scroll-container {
      background-color: color.scale(
        $panes,
        $lightness: -$overlay-lightness-factor * 50%
      );

      .simplebar-scrollbar {
        &,
        &::before {
          background-color: color.scale(
            $text,
            $lightness: -75%,
            $saturation: -50%
          );
        }
      }
    }
  }

  .sheet-inpainter {
    background-color: $body;
  }
  $sheet-color: color.scale(
    $arabian-sand-color,
    $lightness: -80%,
    $saturation: +0%
  );
  .sheet-inpainter-sheet {
    svg,
    svg * {
      fill: $sheet-color;
      stroke: $sheet-color;
    }
  }
  @if $body-gradient != none {
    .sheet-inpainter::before {
      position: absolute;
      content: '';
      height: 100%;
      width: 100%;
      background-color: $body;
      background-image: $body-gradient;
      opacity: 0.4;
    }
    .sheet-inpainter {
      background-color: white;
    }
  }

  #app .application-header,
  #bottom-controls {
    background-color: $panes;
    border-color: $panes-border;
    border-width: thin;

    .expand-tab-display {
      background-color: color.scale(
        $panes,
        $lightness: $overlay-lightness-factor * 10%
      );
    }
  }
  #app .application-header {
    border-bottom-style: solid;
    .header-logo {
      filter: main-filter(
        color.invert($panes),
        calc($overlay-lightness-factor / 10)
      );
    }

    #app-title,
    #undo-button-container,
    #redo-button-container {
      &:not(.disabled) {
        &:hover {
          background-color: color.scale(
            $panes,
            $lightness: $overlay-lightness-factor * 15%
          );
        }
      }
    }
  }

  #bottom-controls > .gridspan {
    > :nth-child(2n) {
      background-color: color.scale($panes, $lightness: -70%);
    }
  }

  $simplebar-track-color: null;
  $simplebar-scrollbar-color: null;
  @if $theme == millenial-pink {
    $simplebar-track-color: $panes;
    $simplebar-scrollbar-color: $active-control;
  } @else {
    $simplebar-track-color: color.scale(
      $panes,
      $lightness: 20% * $overlay-lightness-factor
    );
    $simplebar-scrollbar-color: color.scale(
      $panes,
      $lightness: -25% * $overlay-lightness-factor
    );
  }

  $simplebar-track-color-transparent: color.scale(
    $simplebar-track-color,
    $alpha: -30%
  );
  $simplebar-scrollbar-color-transparent: color.scale(
    $simplebar-scrollbar-color,
    $alpha: -15%
  );

  .simplebar-track {
    &,
    &::before {
      background-color: $simplebar-track-color;
    }
    &::before {
      color: $simplebar-scrollbar-color;
    }

    box-shadow: inset 0px 3px 20px 0.5px
        color.scale(
          $simplebar-track-color,
          $lightness: 30% * $overlay-lightness-factor,
          $alpha: -30%
        ),
      0 0 10px 0.2px
        color.scale(
          $simplebar-scrollbar-color,
          $lightness: 50% * $overlay-lightness-factor,
          $alpha: -70%
        );
  }

  .transparent-scrollbar .simplebar-track {
    // &,
    // &::before {
    //   background-color: $simplebar-track-color-transparent;
    // }
    // &::before {
    //   color: $simplebar-scrollbar-color-transparent;
    // }
  }

  .simplebar-scrollbar {
    box-shadow: 0 0 2px 1px
      color.scale(
        $simplebar-scrollbar-color,
        $lightness: $overlay-lightness-factor * 10%
      );
    border: solid thin
      color.scale(
        $simplebar-scrollbar-color,
        $lightness: $overlay-lightness-factor * 25%
      );
    background-color: $simplebar-scrollbar-color;

    @media (hover: hover) {
      // no hover effects on touch screens since the effect remains active
      // until the user effectively touches another zone on the viewport
      &:hover {
        background-color: color.scale(
          $simplebar-scrollbar-color,
          $lightness: 5%
        );
      }
    }
  }

  // // TODO(@REDACTED, 2022/04/20): refactor priority of simplebar color definitions
  // // to enable factorizing this
  .simplebar-track {
    &.scroll-lock::before {
      color: $active-control;
    }
  }

  .control-item * {
    color: $idle-control;
  }
  .control-item.active * {
    color: $active-control;
  }
  .control-item option {
    color: black;
  }

  .cycleSelect {
    color: $idle-control;
    background-color: color.scale(
      $panes,
      $lightness: -$overlay-lightness-factor * 70%
    );
  }

  .glow-shadow {
    background: none;
    &::after {
      content: '';
      position: absolute;
      z-index: -1;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      box-shadow: 0 0 20px 3px
        color.scale(
          $panes,
          $lightness: 50% * $overlay-lightness-factor,
          $alpha: 50%
        );
      opacity: 0.75;

      background: none;
    }
  }

  @keyframes opacity-on-off {
    0% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }

  .spectrogram-inpainter {
    .inpainter-interface-container {
      &::before {
        left: calc(0vw - #{measures.$spectrogram-margin-width});
      }

      &:after {
        right: calc(0vw - #{measures.$spectrogram-margin-width});
      }

      .spectrogram-inpainter-interface {
        filter: blur(0.6px);
      }
    }
    .spectrogram-inpainter-image-container {
      picture {
        filter: $spectrogram-image-filter;
        img {
          background-color: $spectrogram-background-color;
        }
      }
    }
  }

  .sequencer-grid-overlay span {
    background: radial-gradient(
      color.change($off-white-color, $alpha: 0),
      color.change($off-white-color, $alpha: 0.2) 80%,
      color.change($off-white-color, $alpha: 0.4)
    );
    border: 1em solid color.scale($off-white-color, $alpha: -70%);
  }

  $spectrogram-grid-color-base-hue: 210;
  $spectrogram-grid-color-base-saturation: 39%;
  $spectrogram-grid-color-base-lightness: 20%;
  .spectrogram-inpainter-interface {
    border-color: $spectrogram-grid-color;
    svg:not(.selected) {
      rect.sequencer-toggle-visual {
        stroke: $hot-orange-color;
      }
    }
    svg.selected {
      rect.sequencer-toggle-visual {
        stroke: #00ff41; // Enter the Matrix
      }
    }
    rect {
      stroke: $spectrogram-grid-color;
      &.sequencer-toggle-visual {
        fill: hsl(
          calc($spectrogram-grid-color-base-hue + 30 * var(--frequency-ratio)),
          calc(
            $spectrogram-grid-color-base-saturation - 40% *
              var(--frequency-ratio)
          ),
          calc(
            $spectrogram-grid-color-base-lightness + 40% *
              var(--frequency-ratio)
          )
        );
      }
    }
  }
  .spectrogram-inpainter.busy .sequencer-toggle-visual {
    // disabled because it consumes too much resources
    // fill: hsl(
    //   calc($spectrogram-grid-color-base-hue + 10),
    //   calc($spectrogram-grid-color-base-saturation + 20%),
    //   calc($spectrogram-grid-color-base-lightness - 10%)
    // );
  }
  .spectrogram-inpainter rect:not(.sequencer-toggle-visual) {
    fill: hsl(
      calc($spectrogram-grid-color-base-hue + 10),
      calc($spectrogram-grid-color-base-saturation + 20%),
      calc($spectrogram-grid-color-base-lightness - 10%)
    );
  }

  // .spectrogram-inpainter {
  //   .spectrogram-inpainter-interface {
  //     &.bottom * {
  //       cursor: #{url('!file-loader!string-replace-loader?{search:"black", replace:"#{$spectrogram-cursor-color}", flags:"g"}!../../../static/icons/cursor/paintbrush-solid.svg')}
  //           0 28,
  //         pointer;
  //     }
  //     &.top * {
  //       cursor: #{url('!url-loader!string-replace-loader?{search:"black", replace:"#{$spectrogram-cursor-color}", flags:"g"}!../../../static/icons/cursor/brush-solid.svg')}
  //           10 0,
  //         pointer;
  //     }
  //   }
  //   .eraser .spectrogram-inpainter-interface {
  //     * {
  //       cursor: #{url('!url-loader!string-replace-loader?{search:"black", replace:"#{$spectrogram-cursor-color}", flags:"g"}!../../../static/icons/cursor/eraser-solid.svg')}
  //           2 18,
  //         pointer !important;
  //     }
  //   }
  //   .randomize .spectrogram-inpainter-interface {
  //     &.bottom * {
  //       cursor: #{url('!file-loader!string-replace-loader?{search:"black", replace:"#{$spectrogram-cursor-color}", flags:"g"}!../../../static/icons/cursor/paintbrush-random-solid.svg')}
  //           0 28,
  //         pointer;
  //     }
  //     &.top * {
  //       cursor: #{url('!url-loader!string-replace-loader?{search:"black", replace:"#{$spectrogram-cursor-color}", flags:"g"}!../../../static/icons/cursor/brush-random-solid.svg')}
  //           10 0,
  //         pointer;
  //     }
  //   }
  // }

  .control-item,
  input {
    &:not(.disabled) {
      filter: main-filter($idle-control, $overlay-lightness-factor, 0.3px);
      &:hover {
        filter: brightness(1.03)
          main-filter($idle-control, $overlay-lightness-factor);
      }
    }
  }
  .control-item.active {
    &:hover {
      filter: brightness(1.1)
        main-filter($active-control, $overlay-lightness-factor);
    }
  }
  .zoom-control,
  .fullscreen-control,
  .reset-loop-control {
    background-color: color.change(color.invert($body), $alpha: 0.4);
    > * {
      background-color: color.change($body, $alpha: 0.4);
      &:hover {
        background-color: color.invert($body);
        .reset-loop-control-disable-icon {
          filter: brightness(0.6);
        }
      }
      border-color: color.scale(
        $panes,
        $lightness: $overlay-lightness-factor * 60%
      );
    }
  }
  .reset-loop-control {
    .reset-loop-control-disable-icon {
      filter: brightness(0.3);
    }
  }
  .help-icon {
    color: color.invert($body);
  }

  .sheet-inpainter {
    .sheet-inpainter-sheet {
      filter: drop-shadow(0 0 5px rgba($active-control, 0.1));
    }
    $sheet-inpainter-notebox-border-color: $millenial-pink-body-background;
    $sheet-inpainter-notebox-background-color: $millenial-pink-panes-background;
    $sheet-inpainter-notebox-border-color: white;
    $sheet-inpainter-notebox-background-color: white;
    .notebox {
      border-color: color.scale(
        $sheet-inpainter-notebox-border-color,
        $lightness: -30%,
        $saturation: -30%
      );
      &::after {
        background-color: color.scale(
          $sheet-inpainter-notebox-background-color,
          $lightness: +50%
        );
      }

      &.playing {
        border-color: $accent-color;

        &::after {
          background-color: $sheet-inpainter-notebox-background-color;
        }
      }

      &.dragover::after {
        background-color: $accent-color;
      }
    }
    .Fermata {
      background-color: rgba(white, 0.3);
      // border-color: rgba(0, 0, 0, 0.7);
      &,
      &::after {
        border-color: color.invert($body);
      }

      &.active {
        background-color: rgba(0, 0, 0, 0.6);
        background-color: color.scale($accent-color, $saturation: -35%);
        // border-style: solid;
        border-color: transparent;
      }

      &.imposed {
        background-color: rgba(0, 0, 0, 0.8);
        background-color: color.scale($accent-color, $saturation: -35%);
        border-color: black;
        border-color: color.scale(
          $accent-color,
          $lightness: +40%,
          $saturation: +35%
        );
        border-style: solid;
      }
    }
  }

  .playback-rate-control {
    .nexus-slider-knob {
      stroke: $active-control;
    }
    &.modified-value {
      .nexus-slider-knob {
        fill: $active-control;
        transform: scale(1.3);
        transform-origin: 50% 50%;
        transform-box: fill-box;
      }
    }
  }

  .pia-hyperparameters-controls-container {
    .modified-value {
      .nexus-dial-handle-line {
        stroke: $active-control;
      }
      .nexus-dial-handle-fill {
        fill: $active-control;
        fill-opacity: 0.7;
      }
    }
  }

  .inpainter.in-dragdrop-operation {
    filter: brightness(1.2);
  }
}

// $main-color: $lighter-arabian-sand-color;
:export {
  // main_color: #{'rgb(#{red($main-color)}, #{green($main-color)}, #{blue($main-color)})'};
  darkgray: $darkgray;
  lighter_darkgray: $lighter-darkgray;
  arabian_sand: $lighter-arabian-sand-color;
  lavender_idle_control: $lavender_idle_control;
  lavender_active_control: $lavender_active_control;
  millenial_pink_theme_pink: $millenial-pink-idle-control;
  millenial_pink_theme_blue: $millenial-pink-active-control;
  idle_control: $lavender_idle_control;
  active_control: $lavender_active_control;
  millenial_pink_panes_background_color: $millenial-pink-panes-background;
  lavender_light_mode_panes_background_color: $lavender-panes-background;
  lavender_dark_mode_panes_background_color: $lavender-dark-panes-background;
}
