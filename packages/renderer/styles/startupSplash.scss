@use 'mixins/interfaces';

body.running #configuration-selection-container {
  display: none;
}

#configuration-selection-container {
  max-height: 90%;
  width: 65%;
}

#configuration-selection {
  ::before {
    display: inline-block;
    width: 100%;
  }
  font-size: clamp(1rem, 2.5vmin, 1.4rem);

  display: grid;
  width: 100%;

  grid-template-columns: 100%;
  grid-row-gap: 1.5vh;
  justify-items: center;

  margin-left: auto;
  margin-right: auto;

  * {
    text-align: center;
  }

  .control-item {
    max-width: 10em;
  }

  input {
    font-size: 100%;
    height: 3vh;
    text-align: center;
  }

  // TODO(@REDACTED, 2021/11/04): brute-force way of setting properties
  // of the different settings container elements
  > div,
  > div > div,
  > div > div > div {
    display: inline-grid;
  }
  > div > div,
  > div > div > div {
    &::before {
      text-transform: none;
      font-size: smaller;
      font-weight: lighter;
    }
  }
  div {
    justify-items: center;
    grid-column-gap: 3vw;
    column-gap: 3vw;
    grid-row-gap: 1vh;
    row-gap: 1vh;
  }
  > * {
    width: 100%;
  }

  &.no-server-config #server-address-input {
    visibility: hidden;
  }

  .configuration-selection-footer {
    padding: 1em 0;
    border-top-width: thin;
    border-top-style: solid;
    .github-link {
      max-width: 80%;
      font-size: x-small;
      font-weight: lighter;
      display: block;
    }
  }

  .disclaimer {
    font-size: small;
    font-weight: lighter;
  }

  .signature a {
    margin: 0 1em;
  }
  .github-link a {
    margin: 0 0.3em;
  }

  .application-header {
    position: sticky;

    border-top-width: 1.6vmin;
    top: 0;
    z-index: 11;
    padding-bottom: 0.25em;
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-top-style: solid;
  }
}
#configuration-selection-container {
  .simplebar-track {
    opacity: 0.6;
    border-radius: 5px;
  }
  .simplebar-vertical {
    height: 60%;
    top: 20%;
    right: 2px;
  }
  .simplebar-horizontal {
    width: 80%;
    left: 10%;
  }
}

.centeredXY {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

#use_remote_api-toggle::before {
  font-size: smaller;
  content: 'Use default hosted inpainting API';
}

#server-configuration-container {
  width: 100%;
  &::before {
    content: 'Server configuration';
  }
}

#server-address-container {
  transition: filter 0.1s ease-in-out;
  width: 80%;
  align-items: center;
  grid-template-columns: 1em 1fr 1em;
  grid-template-areas:
    'title title title'
    'help input help-margin';
  &::before {
    grid-area: title;
    content: 'Inpainting API address';
  }
  input {
    grid-area: input;
  }
  a {
    grid-area: help;
    &:hover {
      filter: brightness(1.15);
    }
  }
}

#server-configuration {
  display: grid;

  input {
    width: 100% !important;
    // max-width: 20rem;
    height: 2rem;
  }

  width: 100%;
}

#mode-configuration-container {
  &::before {
    content: 'Interface mode';
  }

  display: grid;
  width: 100%;

  #mode-configuration {
    display: grid;
    white-space: break-spaces;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    max-width: 75vw;

    > div {
      margin: 0 1vw;
    }

    & * {
      text-align: center;
      // width: 100% !important;
      width: min(100%, 80vw) !important;
      height: inherit !important;
      font-size: 0.9rem !important;
    }

    .mode-configuration-button-text {
      &::before,
      &::after {
        display: none;
        overflow: hidden;
      }
    }

    @media screen and (min-width: 250px) {
      .mode-configuration-button-text {
        &::before,
        &::after {
          display: inline;
        }
      }
    }
    // screen and (max-width: 300px) and (min-width: 200px) {
    #pianoto-configuration-button {
      .mode-configuration-button-text::before {
        content: 'ðŸŽ¹  ';
      }
      .mode-configuration-button-text::after {
        content: '  ðŸŽ¹';
      }
    }
    #notono-configuration-button {
      .mode-configuration-button-text::before {
        content: 'ðŸ”Š  ';
      }
      .mode-configuration-button-text::after {
        content: '  ðŸ”Š';
      }
    }
    #nonoto-configuration-button {
      .mode-configuration-button-text::before {
        content: 'ðŸŽ¼  ';
      }
      .mode-configuration-button-text::after {
        content: '  ðŸŽ¼';
      }
    }
  }
}

#start-button {
  width: 50% !important;
  min-width: fit-content;
  height: 100% !important;
  text-transform: uppercase;
  font-weight: bold;

  * {
    font-size: 1.4rem !important;
  }

  --fa-animation-duration: 1s;
  --fa-fade-opacity: 0.9;
}

#configuration-selection.api-status-check {
  cursor: wait;
  * {
    pointer-events: none;
  }

  #start-button {
    div {
      pointer-events: none;
    }
    text-transform: none;
  }
}

@media screen and (max-width: 650px) {
  #mode-configuration-container #mode-configuration {
    grid-auto-flow: row;
    margin: auto;
  }
  #start-button {
    width: 65% !important;
  }
}

#application-mode-select {
  display: none;
}
.nexus-text-button {
  border-radius: 2px;
}

#eula-container {
  &::before {
    content: 'End User License Agreement (EULA)';
  }

  #eula-text-scroll-container {
    width: 90%;
    $border-radius: 5px;
    border-radius: $border-radius;
    .simplebar-vertical {
      border-radius: $border-radius;
      top: 5%;
      height: 90%;
      right: 10px;
    }
    .simplebar-horizontal {
      border-radius: $border-radius;
      left: 25%;
      width: 50%;
      bottom: 5px;
      opacity: 0.7;
      &.simplebar-hover {
        opacity: 1;
      }
    }
    padding: 15px 0;
    border-radius: 5px;
    max-height: 20vh;
    height: 20vh;
  }
  #eula-text-content {
    $padding-horizontal: max(1.5rem, 30px);
    padding: 0 $padding-horizontal 1rem calc($padding-horizontal / 2);
    &,
    * {
      text-align: justify;
    }
    font-weight: 400;

    user-select: text;
  }

  #eula-accept-toggle-container {
    &::before {
      content: 'Agree to the terms of the EULA';
      font-size: smaller;
    }
  }

  &:not(.is-fully-scrolled) {
    #eula-accept-toggle-container {
      cursor: not-allowed;
      :nth-child(n + 1) {
        @include interfaces.hiddenControl();
        pointer-events: none;
      }
    }
  }
}
